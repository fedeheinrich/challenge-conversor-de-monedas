<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/Conversor.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/Conversor.java" />
              <option name="originalContent" value="/**&#10; * Conversor de Monedas usando ExchangeRate API&#10; * Challenge N°2 Correspondiente al Programa Oracle Next Education - Primer proyecto con APIs&#10; *&#10; * @author [Federico Heinrich]&#10; * @version 1.0&#10; */&#10;&#10;import java.util.Scanner;&#10;import apis.CambioMoneda;&#10;import models.Moneda;&#10;&#10;public class Conversor {&#10;    public static void main(String[] args) {&#10;        System.out.println(&quot;&quot;&quot;&#10;                ¡Bienvenido al Conversor de Monedas!&#10;                &#10;                ***************MENU****************&#10;                &#10;                1) Dolar ---&gt; Peso Argentino&#10;                2) Dolar ---&gt; Real Brasileño&#10;                3) Dolar ---&gt; Peso Chileno&#10;                4) Peso Argentino ---&gt; Dolar&#10;                5) Real Brasileño ---&gt; Dolar&#10;                6) Peso Chileno ---&gt; Dolar&#10;                7) Salir&#10;                &#10;                ***********************************&#10;                &#10;                &quot;&quot;&quot;);&#10;&#10;        // Creo un objeto de tipo Scanner&#10;        Scanner scanner = new Scanner(System.in);&#10;        System.out.println(&quot;Seleccione una opción del menú (1-7): &quot;);&#10;        int opcion = scanner.nextInt();&#10;        while (opcion &lt; 1 || opcion &gt; 7) {&#10;            System.out.println(&quot;Opción inválida. Por favor, seleccione una opción del menú (1-7): &quot;);&#10;            opcion = scanner.nextInt();&#10;        }&#10;&#10;        String monedaOrigen = &quot;&quot;;&#10;        String monedaDestino = &quot;&quot;;&#10;        double cantidad = 0;&#10;        switch (opcion) {&#10;            case 1:&#10;                monedaOrigen = &quot;USD&quot;;&#10;                monedaDestino = &quot;ARS&quot;;&#10;                System.out.println(&quot;Ingrese la cantidad en Dolares a convertir en Pesos Argentinos: &quot;);&#10;                cantidad= scanner.nextDouble();&#10;                break;&#10;            case 2:&#10;                monedaOrigen = &quot;USD&quot;;&#10;                monedaDestino = &quot;BRL&quot;;&#10;                System.out.println(&quot;Ingrese la cantidad en Dolares a convertir en Reales Brasileños: &quot;);&#10;                cantidad = scanner.nextDouble();&#10;                break;&#10;            case 3:&#10;                monedaOrigen = &quot;USD&quot;;&#10;                monedaDestino = &quot;CLP&quot;;&#10;                System.out.println(&quot;Ingrese la cantidad en Dolares a convertir en Pesos Chilenos: &quot;);&#10;                cantidad = scanner.nextDouble();&#10;                break;&#10;            case 4:&#10;                monedaOrigen = &quot;ARS&quot;;&#10;                monedaDestino = &quot;USD&quot;;&#10;                System.out.println(&quot;Ingrese la cantidad en Pesos Argentinos en convertir a Dolares: &quot;);&#10;                cantidad = scanner.nextDouble();&#10;                break;&#10;            case 5:&#10;                monedaOrigen = &quot;BRL&quot;;&#10;                monedaDestino = &quot;USD&quot;;&#10;                System.out.println(&quot;Ingrese la cantidad en Reales Brasileños en convertir a Dolares: &quot;);&#10;                cantidad = scanner.nextDouble();&#10;                break;&#10;            case 6:&#10;                monedaOrigen = &quot;CLP&quot;;&#10;                monedaDestino = &quot;USD&quot;;&#10;                System.out.println(&quot;Ingrese la cantidad en Pesos Chilenos en convertir a Dolares: &quot;);&#10;                cantidad = scanner.nextDouble();&#10;                break;&#10;            case 7:&#10;                System.out.println(&quot;¡Gracias por usar el Conversor de Monedas! ¡Hasta luego!&quot;);&#10;                scanner.close();&#10;                return;&#10;        }&#10;        // Llamo a la API para obtener el cambio de moneda&#10;        CambioMoneda cambio = new CambioMoneda(); // creo el objeto que maneja la API&#10;        // Al objeto cambio le aplico su metodo obtenerCambio que me devuelve un objeto de tipo Moneda enviandole sus dos parametros monedaOrigen, monedaDestino&#10;        Moneda moneda = cambio.obtenerCambio(monedaOrigen, monedaDestino);&#10;        if (moneda != null) {&#10;            // Si la moneda no es nula, imprimo el resultado&#10;            double resultado = cantidad * moneda.getValor();&#10;            System.out.printf(&quot;%.2f %s son %.2f %s.%n&quot;, cantidad, monedaOrigen, resultado, monedaDestino);&#10;        } else {&#10;            // Si la moneda es nula, imprimo un mensaje de error&#10;            System.out.println(&quot;No se pudo obtener el cambio de moneda. Por favor, intente más tarde.&quot;);&#10;        }&#10;        // Cierro el scanner&#10;        scanner.close();&#10;        System.out.println(&quot;¡Gracias por usar el Conversor de Monedas! ¡Hasta luego!&quot;);&#10;&#10;    }&#10;}&#10;&#10;&#10;" />
              <option name="updatedContent" value="/**&#10; * Conversor de Monedas usando ExchangeRate API&#10; * Challenge N°2 Correspondiente al Programa Oracle Next Education - Primer proyecto con APIs&#10; *&#10; * @author [Federico Heinrich]&#10; * @version 1.0&#10; */&#10;&#10;import java.util.Scanner;&#10;import apis.CambioMoneda;&#10;import models.Moneda;&#10;&#10;public class Conversor {&#10;    public static void main(String[] args) {&#10;        System.out.println(&quot;&quot;&quot;&#10;                ¡Bienvenido al Conversor de Monedas!&#10;&#10;                ***************MENU****************&#10;&#10;                1) Dolar ---&gt; Peso Argentino&#10;                2) Dolar ---&gt; Real Brasileño&#10;                3) Dolar ---&gt; Peso Chileno&#10;                4) Peso Argentino ---&gt; Dolar&#10;                5) Real Brasileño ---&gt; Dolar&#10;                6) Peso Chileno ---&gt; Dolar&#10;                7) Salir&#10;&#10;                ***********************************&#10;&#10;                &quot;&quot;&quot;);&#10;&#10;        // Creo un objeto de tipo Scanner&#10;        Scanner scanner = new Scanner(System.in);&#10;        System.out.println(&quot;Seleccione una opción del menú (1-7): &quot;);&#10;        int opcion = scanner.nextInt();&#10;        while (opcion &lt; 1 || opcion &gt; 7) {&#10;            System.out.println(&quot;Opción inválida. Por favor, seleccione una opción del menú (1-7): &quot;);&#10;            opcion = scanner.nextInt();&#10;        }&#10;&#10;        String monedaOrigen = &quot;&quot;;&#10;        String monedaDestino = &quot;&quot;;&#10;        double cantidad = 0;&#10;        switch (opcion) {&#10;            case 1:&#10;                monedaOrigen = &quot;USD&quot;;&#10;                monedaDestino = &quot;ARS&quot;;&#10;                System.out.println(&quot;Ingrese la cantidad en Dolares a convertir en Pesos Argentinos: &quot;);&#10;                cantidad= scanner.nextDouble();&#10;                break;&#10;            case 2:&#10;                monedaOrigen = &quot;USD&quot;;&#10;                monedaDestino = &quot;BRL&quot;;&#10;                System.out.println(&quot;Ingrese la cantidad en Dolares a convertir en Reales Brasileños: &quot;);&#10;                cantidad = scanner.nextDouble();&#10;                break;&#10;            case 3:&#10;                monedaOrigen = &quot;USD&quot;;&#10;                monedaDestino = &quot;CLP&quot;;&#10;                System.out.println(&quot;Ingrese la cantidad en Dolares a convertir en Pesos Chilenos: &quot;);&#10;                cantidad = scanner.nextDouble();&#10;                break;&#10;            case 4:&#10;                monedaOrigen = &quot;ARS&quot;;&#10;                monedaDestino = &quot;USD&quot;;&#10;                System.out.println(&quot;Ingrese la cantidad en Pesos Argentinos en convertir a Dolares: &quot;);&#10;                cantidad = scanner.nextDouble();&#10;                break;&#10;            case 5:&#10;                monedaOrigen = &quot;BRL&quot;;&#10;                monedaDestino = &quot;USD&quot;;&#10;                System.out.println(&quot;Ingrese la cantidad en Reales Brasileños en convertir a Dolares: &quot;);&#10;                cantidad = scanner.nextDouble();&#10;                break;&#10;            case 6:&#10;                monedaOrigen = &quot;CLP&quot;;&#10;                monedaDestino = &quot;USD&quot;;&#10;                System.out.println(&quot;Ingrese la cantidad en Pesos Chilenos en convertir a Dolares: &quot;);&#10;                cantidad = scanner.nextDouble();&#10;                break;&#10;            case 7:&#10;                System.out.println(&quot;¡Gracias por usar el Conversor de Monedas! ¡Hasta luego!&quot;);&#10;                scanner.close();&#10;                return;&#10;        }&#10;        // Llamo a la API para obtener el cambio de moneda&#10;        CambioMoneda cambio = new CambioMoneda(); // creo el objeto que maneja la API&#10;        // Al objeto cambio le aplico su metodo obtenerCambio que me devuelve un objeto de tipo Moneda enviandole sus dos parametros monedaOrigen, monedaDestino&#10;        Moneda moneda = cambio.obtenerCambio(monedaOrigen, monedaDestino);&#10;        if (moneda != null) {&#10;            // Si la moneda no es nula, imprimo el resultado&#10;            double resultado = cantidad * moneda.getValor();&#10;            System.out.printf(&quot;%.2f %s son %.2f %s.%n&quot;, cantidad, monedaOrigen, resultado, monedaDestino);&#10;        } else {&#10;            // Si la moneda es nula, imprimo un mensaje de error&#10;            System.out.println(&quot;No se pudo obtener el cambio de moneda. Por favor, intente más tarde.&quot;);&#10;        }&#10;        // Cierro el scanner&#10;        scanner.close();&#10;        System.out.println(&quot;¡Gracias por usar el Conversor de Monedas! ¡Hasta luego!&quot;);&#10;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/apis/CambioMoneda.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/apis/CambioMoneda.java" />
              <option name="originalContent" value="package apis;&#10;import models.Moneda;&#10;import com.google.gson.Gson;&#10;import java.net.URI;&#10;import java.net.http.HttpClient;&#10;import java.net.http.HttpRequest;&#10;import java.net.http.HttpResponse;&#10;&#10;public class CambioMoneda {&#10;&#10;    private final static String API_KEY = &quot;8a29b72a22ff00c5a5089f6a&quot;;&#10;    private final static String URL_BASE = &quot;https://v6.exchangerate-api.com/v6&quot;;&#10;&#10;    public Moneda obtenerCambio(String monedaOrigen, String monedaDestino){&#10;        try{&#10;            // Construyo la URL de la API GET https://v6.exchangerate-api.com/v6/YOUR-API-KEY/pair/EUR/GBP/AMOUNT&#10;            String url = URL_BASE + &quot;/&quot; + API_KEY + &quot;/pair/&quot; + monedaOrigen + &quot;/&quot; + monedaDestino;&#10;            // Creo un cliente HTTP y hago la peticion&#10;            HttpClient cliente = HttpClient.newHttpClient();&#10;            HttpRequest request = HttpRequest.newBuilder().uri(URI.create(url)).build();&#10;&#10;            HttpResponse&lt;String&gt; response = cliente.send(request, HttpResponse.BodyHandlers.ofString());&#10;&#10;            // Uso Gson para convertir el JSON en un objeto Java&#10;            Gson gson = new Gson();&#10;            return gson.fromJson(response.body(), Moneda.class);&#10;        } catch (Exception e) {&#10;            System.out.println(&quot;No se encontró esa moneda.&quot;);&#10;            return null;&#10;        }&#10;    }&#10;&#10;&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package apis;&#10;import models.Moneda;&#10;import com.google.gson.Gson;&#10;import java.net.URI;&#10;import java.net.http.HttpClient;&#10;import java.net.http.HttpRequest;&#10;import java.net.http.HttpResponse;&#10;&#10;public class CambioMoneda {&#10;&#10;    private final static String API_KEY = &quot;8a29b72a22ff00c5a5089f6a&quot;;&#10;    private final static String URL_BASE = &quot;https://v6.exchangerate-api.com/v6&quot;;&#10;&#10;    public Moneda obtenerCambio(String monedaOrigen, String monedaDestino){&#10;        try{&#10;            // Construyo la URL de la API GET https://v6.exchangerate-api.com/v6/YOUR-API-KEY/pair/EUR/GBP/AMOUNT&#10;            String url = URL_BASE + &quot;/&quot; + API_KEY + &quot;/pair/&quot; + monedaOrigen + &quot;/&quot; + monedaDestino;&#10;            // Creo un cliente HTTP y hago la peticion&#10;            HttpClient cliente = HttpClient.newHttpClient();&#10;            HttpRequest request = HttpRequest.newBuilder().uri(URI.create(url)).build();&#10;&#10;            HttpResponse&lt;String&gt; response = cliente.send(request, HttpResponse.BodyHandlers.ofString());&#10;&#10;            // Uso Gson para convertir el JSON en un objeto Java&#10;            Gson gson = new Gson();&#10;            return gson.fromJson(response.body(), Moneda.class);&#10;        } catch (Exception e) {&#10;            System.out.println(&quot;No se encontró esa moneda.&quot;);&#10;            return null;&#10;        }&#10;    }&#10;&#10;&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/models/Moneda.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/models/Moneda.java" />
              <option name="originalContent" value="package models;&#10;import com.google.gson.annotations.SerializedName;&#10;&#10;public class Moneda {&#10;    @SerializedName(&quot;target_code&quot;)&#10;    private String nombre;&#10;    @SerializedName(&quot;conversion_rate&quot;)&#10;    private double valor;&#10;&#10;    public Moneda(){}&#10;    // Constructor por defecto&#10;    public Moneda(String simbolo, double valor) {&#10;        this.nombre= simbolo;&#10;        this.valor = valor;&#10;    }&#10;&#10;    // getters&#10;    public String getNombre() {&#10;        return nombre;&#10;    }&#10;    public double getValor() {&#10;        return valor;&#10;    }&#10;&#10;    // setters&#10;    public void setNombre(String nombre) {&#10;        this.nombre = nombre;&#10;    }&#10;&#10;    public void setValor(double valor) {&#10;        this.valor = valor;&#10;    }&#10;&#10;    public String toString(){&#10;        return &quot;Nombre: &quot; + nombre + &quot;\nValor: &quot; + valor;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package models;&#10;import com.google.gson.annotations.SerializedName;&#10;&#10;public class Moneda {&#10;    @SerializedName(&quot;target_code&quot;)&#10;    private String nombre;&#10;    @SerializedName(&quot;conversion_rate&quot;)&#10;    private double valor;&#10;&#10;    public Moneda(){}&#10;    // Constructor por defecto&#10;    public Moneda(String simbolo, double valor) {&#10;        this.nombre= simbolo;&#10;        this.valor = valor;&#10;    }&#10;&#10;    // getters&#10;    public String getNombre() {&#10;        return nombre;&#10;    }&#10;    public double getValor() {&#10;        return valor;&#10;    }&#10;&#10;    // setters&#10;    public void setNombre(String nombre) {&#10;        this.nombre = nombre;&#10;    }&#10;&#10;    public void setValor(double valor) {&#10;        this.valor = valor;&#10;    }&#10;&#10;    public String toString(){&#10;        return &quot;Nombre: &quot; + nombre + &quot;\nValor: &quot; + valor;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>